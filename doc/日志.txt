2013-03-15开始开发

dns头后面跟的顺序：Question->Answers->Authority->Additional

只处理type1 class1

实现:
1.本地监听UDP 53端口，若在数据库找不到，负责转发给dns服务器，否则将上次转发得到的dns反馈数据发送给dns请求者
2.


Question问题结构体，不能包含可变长度的name，直接使用指针操作读取即可

压缩格式的读取


今天：
测试抓取dns包，反馈一个自定义包，看能否成功    经过测试，可以成功



1.监听udp 53端口，若数据库找不到对应的域名，则负责向公开的dns转发，然后转发得到的应答报文以十六进制保存到数据库，再返回查询客户端。
2.抓包，得到53端口的信息，进行主动向dns请求，然后将得到的ip与域名的对应值写入hosts系统文件

vc开发需要使用：
sqlite(暂时用单例模式结合锁机制实现并发)，封装dns解析器，使用csocket，多线程


DNSCache:
1.界面设计
2.类设计
3.数据库设计
4.线程池


///sniffer
另外调整截屏的规律
扫描本地网卡 ok

多网卡 使用哪个默认网卡？
网卡多个ip，使用哪个默认ip？


h_addr_list顺序：
第一个网卡的第一个ip ->
第二个网卡的第一个ip ->
第一个网卡的剩余ip ->
第二个网卡的剩余ip

GetAdaptersInfo得到的网卡信息:
顺序刚好相反，最后一个第一个ip

无线网卡不能使用混杂模式


流程：
1.dns转发
2.保存dns响应报文到数据库
3.第二次得到dns请求，从数据库查找域名，找到后，修改dns请求id一致，然后回复给客户端


数据库：
域名 					dns响应报文hex
www.baidu.com hex

任务列表：		取消
buf 1024*2
len 
SOCKADDR_IN 客户端信息

线程1：负责转发dns(若数据库存在，则读取数据库并返回)，并将公开dns的响应添加到数据库保存任务链表
线程2：负责保存数据库

用SYSTEMTIME结构体计算出该软件优化的速度

解决nslookup识别服务名的问题

1.将本地dns服务器与数据库操作分别移动到2个线程
2.模拟dns协议资源记录，生成nslookup命令的主机名检测包，修改自定义dns地址解析出来的主机名称
3.增加从数据库读取dns响应报文的功能

主机名要修改成该软件的名称

sock函数阻塞问题：使用setsockopt函数来设置

使用线程池优化

注：使用WaitForSingleObject的时候要注意，若线程中需要使用到消息循环，那么主线程调用WaitForSingleObject就会卡死，比如关闭线程的时候。使用MsgWaitForMultipleObjects接收线程的消息循环

大量测试dns服务器性能

【后期优化】数据库：
访问次数 最后访问时间 ip 端口   -》 另开线程延迟处理
网站的访问以图表的方式显示，访问排行榜
节省的时间：第一次转发dns时，要将转发时间记录下来

注：sqlite线程模式：0 单线程 1 串行 2 多线程  1、2安全

1.解决线程终止导致界面卡死的bug，若线程使用到消息循环的函数，则主线程不能使用WaitForSingleObject等待。
2.大量测试dns服务器性能
3.增加修改本地dns的功能


1.完成dns设置功能，通过注册表修改，并调用相应的函数使之生效，并调试
2.封装了windows获取网卡信息的接口，以便以后调用

修改本地dns，注册表

写一个方法，获取网卡信息并设置
序号 描述 名称 dns列表

注册表键值：
DhcpNameServer
NameServer 若有值，则为静态，若没值，则使用DhcpNameServer的值
若不存在nameserver，则创建一个

通过注册表修改dns，但软件仍然没有使用最新的dns，cmd可以
wmi Win32_NetworkAdapter



===========2013-03-22 10:37:09===========
1.设计界面

log:
节省连接： 数据库读取
使用连接： 网络获取

===========2013-03-25 14:42:23===========
1.使用wmi完成dns修改 ok
数据库版本兼容问题
2.线程参数,不要用this
3.数据库写入失败
	还在链表中，还未写入数据库，又来了相同的请求？ ok
	停止服务，数据库不能删除，可以把数据库对象类，用指针来操作，停止的时候释放空间，尝试？
	
单例


==============2013-03-26 10:04:27
1.数据库版本兼容问题 【后期优化】
2.线程参数,不要用this  ok
3.数据库写入失败
	停止服务，数据库不能删除，可以把数据库对象类，用指针来操作，停止的时候释放空间，尝试？ ok 没有释放statement
4.单例
5.增加请求时间间隔统计【后期优化】
8.退出线程的时候，把链表结束的数据写入数据库 ok
9.修改本地dns，只修改一个 ok
10.日志
11.修改主机名包，将server改为公司网址 ok


平均一个dns缓存占143字节
10MB空间就能保存73326个网址


==============2013-03-27 12:25:23
1.解决重复点击一键优化不生效的bug	ok
2.解决线程退出的bug	ok
3.start的时候，从db载入dns到内存 ok
4.重新整理代码 ok
5.增加应用程序单例 ok
可以通知消息
6.增加了托盘图标，动态闪烁 ok


==============2013-03-28 09:38:13
1.增加是否连接网线的判断 ok
gethostbyname函数会记录在dns缓存中   不采用


==============2013-03-29 09:57:15
1.本地判断链接是否可用    经测试，会严重降低处理速度，不采用
2.使用CTreeCtrl显示域名+地址 ok
3.调试域名解析错误的问题，从dns响应报文解析出别名与ip。
bug: 在判断域名的使用，不能使用find函数，必须使用==


==============2013-04-01 09:28:38
1.优化上周遗留的代码


==============2013-04-02 09:57:50
1.Linux服务获取客户端访问的域名  ?
2.循环遍历所有域名，保持最新dns解析地址，若有差异，将更新包发送给客户端  ?
3.客户端提示有新数据，是否更新，若更新，写入数据库与内存  ?
4.Linux开发一个高性能udp服务器  ?
5.了解udp并发服务器的设计
6.不同区域获取到的dns不一样  ?
本地获取的数据对其他区域不适用
27.154.21.30  福建省厦门市 电信

udt
另外开一个sock，并重用53端口  失败
测试：同ip同端口，服务端，是否接收多个数据  只能有一个sock接受到数据

udp并发服务器
udp没有listen，是2元组， 想做并发udp服务端， 服务端每次需要主动创建socket并bind(0)选择一个端口与对应的客户端专门通信，当然服务端应该也向客户端发包以便让客户端知晓服务端的服务端口。


==============2013-04-03 10:15:02
==============2013-04-07 10:16:21
1.界面设计   ing
2.数据库设计 wait
2.新开一线程，后台更新最新数据，涉及到数据库时间字段,md5
3.封装md5类	ok

dnsspeeder:
1.请求状态：平均一秒请求个数，最高纪录 波形图
2.域名服务器的选择，可以动态判断该域名是否可用
3.域名访问详细信息：访问量 最后访问时间 最后更新时间 请求类型 可选的列
4.请求包详细信息：时间 请求ip 域名 请求类型 请求状态(成功|失败)
5.局域网自建web服务器的域名解析   暂时不考虑
6.菜单栏		ok
7.缓存更新，按照ttl时间更新 或 按照自定义时间更新
8.开机自启动
9.链表搜索优化：访问量高的移动到表头
10.将本地所有网卡的dns备份起来，并设置为本地ip，停止服务恢复
11.TTL

界面：
1.控件跟随窗口改变而改变 ok

数据库：
1.完成列表的更新，延迟处理,建立新数据类型，使用新类管理
数据库字段：
domain reqhex reshex ipvec visit visittime updatetime

loadmemsql

2013-04-09停止开发，还未完成

INFINE no

2013-05-20开始开发

======2013/5/21 13:44:37
1.结构体，添加time_t秒，用来根据ttl更新dns ok
2.线程：更新到ui()，根据ttl更新dns(两外一个dns链表)
3.写数据库的链表的指针，与map共享指针，因为写数据库只涉及到读 ok
4.数据库增加字段,ttl lasttime			ok
数据库字段：
domain reqhex reshex ipvec visit ttl lasttime visittime updatetime
6.忽略ipv6查询	ok
7.只记录A类型，其余的只负责转发 ok

注：不能使用make_pair


========2013/5/22 10:59:28
2.google dns		ok
5.停止服务，数据库不能删除	ok

注：CString使用Format的时候，要注意64为系统的long型，要使用%I64d

======2013/5/23 10:16:51
7.指向同一个指针，重复添加，没用	ok
8.解析错误，nslookup谷歌，显示youtube，nslookup youtube，显示谷歌	ok
9.服务器显示unknown	ok
11.默认转发公开dns地址
12.ipv6的反馈可能要发n次，最后一次可能没有ip地址，所以ui就显示无，只解析ipv4的ip到数据库与ui	ok
		还要判断反馈的类型是否是A	ok
		udp返回的地址会错误，所以必须依靠dns id来辨别	ok
		用同一个sock负责管理所有网站，造成错乱	ok
		独立创建sock获取dns	ok
		answer的第一个并不是压缩指针，而是字符串	ok


======2013/5/24 9:46:35
2.状态信息：1秒内的访问量，更新数据库(包括域名)，更新dns缓存(域名)	ok
3.结束，更新数据库，若有差异，则update到数据库，	ok
4.修改的数据添加到更新链表中,如果移动到数据库写入线程,提高效率	ok
5.更新dns缓存链表	(只会增加，不会减少)
	创建线程
	每2秒搜索一次list(内存寻找区的备份)，寻找出超时的dns缓存-》转发-》lock 写入内存寻找区 写入数据库更新链表 unlock -》
	转发的时候，更新到ui
	使用list，遍历效率比较高

7.断网处理					不用处理 ok
8.启动载入更新链表	ok
9.若停止的时候，全速更新与写库			ok


=======2013/5/27 10:04:14
1.添加过滤域名，对域名指定ip
2.开机启动，启动软件，自动优化，启动软件，自动隐藏到托盘，设置窗口使用观察者模式，主机信息，是否实时滚动, 手动更新， 自动更新，定时更新
3.不更新所有域名，若最后访问时间距离现在低于20分钟，则更新	ok
4.更新完成后，一下子全部写进去，或者更新50个，写一次	ok
5.当要结束应用时，不再更新数据	ok
6.更新数据，判断是否相等，否则再写	ok
7.还没load完成，就开始更新，使用标志 ok
9.正在载入数据库，不能关闭窗口，将load移动到按钮事件，然后自己getmessage防止界面冻结  ok
10..数据库增加字段,lastupdatetime lastvisittime			ok
数据库字段：
domain reqhex reshex ipvec visit ttl lastvisittime lastupdatetime visittime updatetime
11.导出所有域名, ip
12.菜单事件	ok
13.更新链表，从数据库访问，也要讲信息修改到更新链表里	ok
14.静态库	ok

启动名称: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run


屏蔽esc	ok
遍历注册表，自己封装类，继承



=======2013/5/29 15:42:14
更新失败，不处理



####################################################################################



//////////////DNS客户端与服务端/////////////
====2013/7/9 18:33:53
1.加密与解密数据，判断是否一致
2.跟踪dns头部，研究dns头部的设计
3.dns类，解析dns所有信息
4.增加tcp响应
5.考虑高性能udp服务器的问题，搜索udp开源服务器

接收到并加密发送到443	

设计方案一：一个线程处理整个流程。 
设计方案二：一个接收线程+一个缓冲队列+一个处理线程。 
设计方案三：N个接收线程+一个缓冲队列+一个处理线程，其中N > 1。 
设计方案四：N个接收线程+N个缓冲队列+一个处理线程，其中N，M > 1，N和M可以相等。 

加密算法：非对称


从数据库取dns缓存，若ttl过期，则马上重新转发dns请求，得到最新的dns响应

返回一个无效的ipv6的dns响应




#######################################
总体设计：
#######################################
1.安全 快速 
2.三种模式：正常模式、安全模式、高级模式
正常模式：不加密
安全模式：加密
高级模式：部分加密

其他功能：
3.自定义指定域名与ip，生成规范格式的dns,考虑是否超过512 dialog
4.加密级别选择
5.导出	详细的请求报文，响应报文模拟信息，进度 txt
				域名申请信息 txt excel
				域名列表  txt
				安全名单 txt
6.导入	安全名单 txt
//7.根据dns请求量，描绘曲线图
8.过滤功能，将非法或不需要的域名重定向到无效ip,0.0.0.0
9.tc标志
10.网络使用select非阻塞模式


提供DLL，封装API，与界面分离
c++ 界面 功能 分离
不要把具体的数据和业务逻辑直接写在MFC中，MFC只是一个壳。
界面和逻辑的剥离一般考虑在越大型的项目中越重要


==2013/7/12 10:38:55
1.完善sqlite操作类		ok
2.仿真ipv6的响应 ing

==2013/7/15 11:14:52
1.仿真ipv6的响应,只需要在客户端实现 ok
2.完成dns解析类 ing
	解析dns所有域名和ip，必须按照顺序

==2013/7/16 10:32:58
1.完成dns解析类 ok

==2013/7/17 10:23:13
1.了解libevent
2.压力测试：若遇到解析不到的域名，速度明显降下来

==2013/7/18 9:38:29
1.linux测试libevent

==2013/7/19 10:07:47
1.windows测试libevent

==2013/7/23 16:38:08
1.了解加密算法库
2.使用aes加密算法，暂时不用crypto++库
3.dns超时，重发请求，是否使用新的socket，端口,使用新端口，重建了udp socket

客户端与服务端的请求头设计:
typedef struct
{
	unsigned short flag;//dns请求(密钥md5后6位) 同步新密钥 aes加密级别:128 192 256
	unsigned char  key[32];//密钥
	unsigned short len;//dns报文长度
}SyncHeader;

结构体要加个标志，可以作为结构体解析的正确判断

flag标志位:
12345678
0000000000000000
0000000x	0x01	SYNCFLAG_DNSQR			//查询(0) | 响应(1)		key保存着aes密钥的md5值得后6位
000000x0	0x02	SYNCFLAG_UPDATEKEY	//更新密钥(1)					key保存着aes新密钥
0000xx00	0x0c	SYNCFLAG_AESLEVEL		//00 不加密(0) | AES128(1) | AES192(2) | AES256(3)
																		//01 AES128							取key的前16字节为密钥
																		//10 AES192							取key的前24字节为密钥
																		//11 AES256							取key的前32字节为密钥

flag设置于获取的宏函数
#define SYNCFLAG_DNSQR     0x01
#define SYNCFLAG_UPDATEKEY 0x02
#define SYNCFLAG_AESLEVEL  0x0c
#define SYNCFLAG_AESLEVEL_128 0x04
#define SYNCFLAG_AESLEVEL_192 0X08
#define SYNCFLAG_AESLEVEL_256 0X0c

#define ISDNSREQ(flag) ((flag & SYNCFLAG_DNSQR)==0)
#define ISDNSRES(flag) (flag & SYNCFLAG_DNSQR)
#define ISUPDATEKEY(flag) (flag & SYNCFLAG_UPDATEKEY)
#define GETAESLEVEL(flag) (flag & SYNCFLAG_AESLEVEL)

#define SETDNSREQ(flag) (flag &= ~SYNCFLAG_DNSQR)
#define SETDNSRES(flag) (flag |= SYNCFLAG_DNSQR)
#define SETUPDATEKEY(flag) (flag |= SYNCFLAG_DNSQR)
#define SETAESLEVEL_128(flag) (flag |= SYNCFLAG_AESLEVEL_128)
#define SETAESLEVEL_192(flag) (flag |= SYNCFLAG_AESLEVEL_192)
#define SETAESLEVEL_256(flag) (flag |= SYNCFLAG_AESLEVEL_256)
#define CLEARFLAG(flag) (flag &= 0)


根据flag标志，得出aes的加密级别
若是128，则使用key里面的16字节为密钥
若是192，则使用key里面的24字节为密钥
若是256，则使用key里面的32字节为密钥

key:
客户端请求，key为aes密钥的md5后6位
服务端响应，若aes密钥相同，key为aes密钥的md5后6位
						若aes密钥不同，key为新的aes密钥


重要:
1.测试epoll的tcp结束，只能加标志或者设置长度

2.listenfd非阻塞
connfd阻塞，
当客户端发送数据过去，如果以sock阻塞在recv，那么第二个connfd再发过去，也会阻塞，所以阻塞不可行

3.epoll下的udp
由于要记录客户端的地址信息，epoll只监听udp的接收，处理完成后马上sendto给客户端
转发dns请求不通过epoll，在远处发送阻塞，超时时间1s

nslookup www.baidu.com
十六进制请求报文：
0002010000010000000000000377777705626169647503636F6D0000010001



判断tcp接收结束：
1.标志
2.长度



==注意事项
1.设计特殊网址文件，类似gfwlist.txt
2.网络设置问题，在拔掉网线的情况下，开启服务
3.递归，直到找到
4.若一个请求阻塞，则服务端会被拖垮，极大的降低速度
	所以客户端与服务端，要采取 接收线程->缓冲队列->处理线程
	若使用epoll来处理所有udp句柄，非阻塞socket？
5.要考虑tcp截断的情况，tcp截断的情况，不解析dns
6.udp公网测试：经过测试，包长最大1472，稳定
2.封装win线程，线程池


#######################################
客户端
#######################################
流程：
封装线程类 互斥类 数据库类 dns解析类 dns制造类 aes类 md5类 数据仓库类 select类(init,add,del,dispatch) ip修改类
三种模式-虚函数设计
接口设计 回调函数设计(安全名单导入 导出 编辑，开启，停止)
设计select使用的结构体

==2013/7/26 10:11:55
1.测试软件对windows 2000的兼容性,vs2010开发的程序，windows2k运行不了
2.测试单例，dll里面的c++单例，只对于该次调用有效。若有其他程序调用该dll，还是会重新生成静态对象
3.封装互斥类CSFMutex CMd5 CAes CDnsParser CPublic CDbSqlite ip修改类

==2013/7/29 9:28:46
1.
MFC中用CString，标准C++用wstring
2.单例，加锁
3.封装线程池

==2013/7/30 13:21:07
1.dns响应报文允许的最多ip地址
长度:
20 + 80 + 4 + (2+16)*x <=512
104 + 18x = 512
22.66

20+15+4+18x=512
26

max=255
2.完成dns制作类
3.测试基于tcp的dns请求

1.设计提供给界面层的调用接口；
2.设计select指定的回调函数；
3.封装select的服务端。

接口：
StartServer						开启服务
StopServer						停止服务
ImportSafeList				导入安全名单
ExportSafeList				导出安全名单
ExportDomainList			导出域名列表
ExportDomainInfo			导出域名申请的详细信息(域名，ip，时间，ip，端口，次数)
ExportEmulateDnsInfo	导出dns仿真信息
ImportBlackList				导入黑名单，广告黑名单
ExportBlackList				导出黑名单，广告黑名单
AddCusDomainIpList		添加自定义的域名与ip
DelDnsCache						删除所有dns缓存数据或指定域名内容删除
FeedBack							反馈信息到服务器
SearchIp							查询ip所在地

重要：统计图
显示域名ip所在地
显示用户输入的ip所在地
域名解析速度，提升百分之97


回调:设计select回调的结构体	ok
导入导出的处理进度 
dns访问信息(安全访问数量，过滤数量，解析失败, 访问量)
数据库
当前dns请求状态


模拟dns信息的log文件设置
是否开启局域网公用功能:127.0.0.1 0.0.0.0
描绘曲线图需要的数据
导入导出的进度与详细信息
只提供udp服务端，tcp不提供

select * from dns_table where domain like '%baidu%'
delete from dns_table where domain like '%baidu%'

找不到域名的情况：	ok
增加解析情况
Questions 1
Answers 0
Authority 1
Additional 0
保存到数据库

select udp写：
效率低下：若tcp连接的数量大于udp连接的数量，那么等待一个udp写事件，必须经过n个tcp写事件的过程，延时	ok

udp发送错误端口，10054错误，需要设置wsaioctl			ok

2种方案都加，
保存不存在的域名解析结果
dns请求的转发，直接阻塞转发，不需要通过select
正常情况下，用户不会去解析不存在的域名
添加到select
一个不存在的域名，解析阻塞的时间，可以解析8个普通域名

dll共享变量:		ok
#pragma data_seg(".SharedData")
int g_x = 2;
#pragma data_seg()
#pragma comment(linker, "/SECTION:.SharedData,RWS")

c接口，类接口?

localtime time

select加入过期时间，若udp丢包，则占用了select空间

写数据仓库	ok
安全名单 safelist
定向名单（修改，提供修改ip或者黑名单）directList

数据库实现,字段:dnscache
domain iplist reqhex reshex mode ttl updatedns visit firsttime lasttime updatetime



统计:rtdata
date safe filter failed total

===2013/8/6 15:24:06
1.修改项目的编码，使用多字节字符集

dns缓存项，3种模式，界面添加各模式的域名，其实算是修改模式
长度为0，不用转换为hex
select 53 不计 超时
dns请求，原地转发,若通过select转发，麻烦，需要增加许多变量，导致程序混乱

===2013/8/8 18:00:21
1.完成dns转发逻辑
2.添加dns更新线程,读取改变链表，更新到sql和ui
3.设置本地ip

模拟阻塞实现 ok
不存在的域名不会影响总体速度，域名不添加到内存与数据库 ok
仿真反向解析与ipv6 ok
select提高并发量，解决不存在的域名导致的阻塞问题


===2013/8/12 11:39:36
设置ip ok
写数据库 ui 回调 ok
dns改变链表，线程循环读取 ok
整理代码	ok
数据库还未更新	ok
错误回调	ok
api接口名称 API_	ok
base64类,导入导出 ok
处理域名大小写 ok
线程，测试dns速度   ###

www.baidu.com
www.youku.com

设置是否按照ttl更新	ok
增加设置接口	ok
删除域名 add ok
测试安全名单 ok

##自动检测dns速度	ok
开启一个线程，循环nslookup www.baidu.com
send:
0002010000010000000000000377777705626169647503636F6D0000010001
得到时间
增加接口 回调
添加dns数据库

检测dns速度，添加到线程	ok
exe与dll间，参数的传递	ok
vs可以配置依赖项编译，编译必须是用MD MDD，这样保证dll与exe间,new出来的空间可以互相释放	ok
提供设置测试域名，否则若该域名失效，则不能使用

写入数据库：
dns ip
全局变量设
写入ini配置文件 ok
initdata由dll创建	ok
测试server2003的兼容性	ok
不直接操作底层参数，界面设置完成后，将设置的参数传递到dll	ok
用户只能添加和删除自己添加的dns地址	ok
版本兼容性，数据库版本兼容性
数据库重要版本的表名

主界面调用退出时，可使用线程来退出，然后回调通知主界面停止

开启线程与停止线程，使用线程来控制	将来若阻塞，则使用这个方法

获取包含某字符串的字符,删除，更新，黑名单
查找包含某字符串的字符


###############代码量：16085行

===2013/8/15 14:52:12
dll：
1.添加安全名单规则，黑名单规则	ok
2.去掉base64加密	ok
3.修改一些方法支持DNS_BLACK	ok
4.写入数据库	ok
5.创建数据库类	ok
6.黑名单规则添加写功能，修改#########

rule TEXT primary key, mode INTEGER
数据库版本
数据库只有读，

域名规则:
alphabet (A-Z), digits (0-9), minus sign (-), and period (.) .

规则:
*.abc
*.abc.*
abc.*
www.map.com

测试黑名单	ok
测试安全名单	ok

过滤情况：
前缀，后缀，相等


====2013/8/19 10:09:14
程序逻辑：
1.若经过规则匹配为安全名单，则获取到的信息存入内存
  添加一个安全名单规则：添加到链表，遍历所有白名单的域名，若符合规则，修改成安全名单
  删除一个安全名单规则：从链表删除，遍历所有安全名单的域名，若不符合规则，修改成白名单

2.若为黑名单，则手动生成缓存，并响应
  黑名单不写入内存，生成黑名单，速度非常快，只有512字节，几个拷贝动作罢了
  但不管是哪个类型的域名，都要经过黑名单规则的判断，浪费效率

3.黑名单适用于所有模式
4.安全名单只适用于高级模式，因为安全模式除黑名单外，都使用安全路径解析
5.黑名单的域名不写入内存，否则添加一个新的规则
  
6.以前导入导出黑名单和安全名单，改成导入规则，并重新匹配内存的所有域名，并修改

7.优先级
黑名单》安全名单


参数，规则写入数据库	ok
数据库分页查询	ok
select * from dns_table order by visit asc limit 10 offset 0


===2013/8/20 11:12:55
新功能：
1.软件自动更新
2.解析所有域名，手动操作，用户可以自行决定何时更新一次

细节：
clistctrl：分页显示
只显示最后更新的100条数据，超过100，清空列表,,暂时//所有数据往前移动50个位置

ui:
先画出最基本的功能界面
导出域名列表
导出域名详细信息
导出dns仿真信息

导入安全规则
导出安全规则

导入黑名单规则
导出黑名单规则

新建安全名单规则
删除安全名单规则

新建黑名单规则
删除黑名单规则

新建定向名单
删除定向名单

新建dns地址

删除dns缓存
删除所有dns缓存

反馈

===2013/8/21 14:14:02
1.首次加载dns，只取后面N个	ok
2.内存泄露检测	ok
3.恢复ip，设置最快的前2个	ok
4.底层在更新dns到ui，刚好ui下发停止线程的命令，这样就导致死锁	ok
5.在有缓存的情况下，更新到ui的锁会导致响应dns的速度变慢	ok
6.使用线程退出服务，回调通知ui	ok


====2013/8/22 9:48:17
1.托盘图标，封装成类	ok
2.实现域名实时数据，更新到饼图	no
4.tab顺序	ok
5.修改域名请求状态	ok
6.每日的访问情况，可以使用饼图来描述 no
7.处理解析失败的域名	no
8.解析情况写入数据库	ok
10.完成了版本信息	ok
11.托盘图标，右键菜单	ok
12.开机启动	ok
13.单例	ok
MAKEWPARAM不起作用,BN_SETFOCUS怎么改都是单击事件
PostMessage(WM_COMMAND, MAKEWPARAM(IDC_BTN_START, BN_SETFOCUS), 0);
设置到ui
关闭，判断服务是否关闭
14.制作安装包

遗留：退出不能设置dnsip
由于CoInitializeSecurity函数调用失败，得到1008错误
只要首次调用该函数即可	ok

获取路径异常	ok



====2013/8/27 15:08:45
1.整合功能到菜单映射函数
2.历史访问量，可显示
3.运行时间	ok
4.屏蔽esc退出	ok
5.冲突，关闭服务的时候，退出	ok
6.导入导出，使用ini文件	ok
7.封装ini类	ok
8.菜单的控制，要等待start为false，stop为true的时候改变

9.是否修改dns请求量，以域名为单位
10.是否滚动
11.CFileDialog使父窗口失去焦点：将CDialogEx改为CDialog，或者CFileDialog传入父窗体theApp.GetMainWnd()->GetWindow(GW_HWNDPREV),然后再调用setfocus

12.不能上网的时候，不能nslookup
原因是在更新dns，卡住

13.导出超过1000个域名的时候，只能导出1000个，sql语句有问题

#######################################
服务端
#######################################
1.服务端增加统计功能:用户数量，地区，域名排行
2.接收到数据包，判断是否是正确的数据包

